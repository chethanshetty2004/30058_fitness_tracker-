import psycopg2
from psycopg2 import sql
import uuid
from datetime import datetime

class FitnessDB:
    def __init__(self, dbname, user, password, host, port):
        self.conn = None
        self.cursor = None
        try:
            self.conn = psycopg2.connect(
                dbname=dbname,
                user=user,
                password=password,
                host=host,
                port=port
            )
            self.cursor = self.conn.cursor()
        except psycopg2.OperationalError as e:
            print(f"Unable to connect to the database: {e}")
            self.conn = None
            self.cursor = None

    def close(self):
        if self.cursor:
            self.cursor.close()
        if self.conn:
            self.conn.close()

    def _execute_query(self, query, params=None):
        if self.conn is None or self.cursor is None:
            return None
        try:
            self.cursor.execute(query, params)
            self.conn.commit()
            return self.cursor
        except psycopg2.Error as e:
            self.conn.rollback()
            return None

    # CRUD Operations for Users
    def create_user(self, user_name, email, weight):
        user_id = str(uuid.uuid4())
        query = "INSERT INTO users (user_id, user_name, email, weight) VALUES (%s, %s, %s, %s)"
        return self._execute_query(query, (user_id, user_name, email, weight))

    def get_user(self, user_id):
        query = "SELECT * FROM users WHERE user_id = %s"
        cursor = self._execute_query(query, (user_id,))
        return cursor.fetchone() if cursor else None

    def update_user(self, user_id, user_name=None, email=None, weight=None):
        updates = []
        params = []
        if user_name is not None:
            updates.append("user_name = %s")
            params.append(user_name)
        if email is not None:
            updates.append("email = %s")
            params.append(email)
        if weight is not None:
            updates.append("weight = %s")
            params.append(weight)

        if not updates:
            return False

        params.append(user_id)
        query = f"UPDATE users SET {', '.join(updates)} WHERE user_id = %s"
        return self._execute_query(query, tuple(params))

    def delete_user(self, user_id):
        query = "DELETE FROM users WHERE user_id = %s"
        return self._execute_query(query, (user_id,))

    # CRUD Operations for Workouts
    def create_workout(self, user_id, duration_minutes):
        workout_id = str(uuid.uuid4())
        query = "INSERT INTO workouts (workout_id, user_id, duration_minutes) VALUES (%s, %s, %s)"
        return self._execute_query(query, (workout_id, user_id, duration_minutes))

    def get_workouts_by_user(self, user_id):
        query = "SELECT * FROM workouts WHERE user_id = %s ORDER BY workout_id DESC"
        cursor = self._execute_query(query, (user_id,))
        return cursor.fetchall() if cursor else []

    # CRUD Operations for Exercises
    def create_exercise(self, workout_id, exercise_name, reps, sets, weight_lifted):
        exercise_id = str(uuid.uuid4())
        query = "INSERT INTO exercises (exercise_id, workout_id, exercise_name, reps, sets, weight_lifted) VALUES (%s, %s, %s, %s, %s, %s)"
        return self._execute_query(query, (exercise_id, workout_id, exercise_name, reps, sets, weight_lifted))

    def get_exercises_by_workout(self, workout_id):
        query = "SELECT * FROM exercises WHERE workout_id = %s"
        cursor = self._execute_query(query, (workout_id,))
        return cursor.fetchall() if cursor else []

    # Business Insights
    def get_business_insights(self):
        insights = {}
        queries = {
            "Total Users": "SELECT COUNT(*) FROM users",
            "Average User Weight": "SELECT AVG(weight) FROM users",
            "Total Workouts": "SELECT COUNT(*) FROM workouts",
            "Total Workout Minutes": "SELECT SUM(duration_minutes) FROM workouts",
            "Average Workout Duration (min)": "SELECT AVG(duration_minutes) FROM workouts",
            "Most Reps in an Exercise": "SELECT MAX(reps) FROM exercises",
            "Least Reps in an Exercise": "SELECT MIN(reps) FROM exercises",
            "Total Weight Lifted": "SELECT SUM(weight_lifted) FROM exercises"
        }
        for title, query in queries.items():
            cursor = self._execute_query(query)
            if cursor:
                result = cursor.fetchone()
                insights[title] = result[0] if result else 'N/A'
            else:
                insights[title] = 'N/A'
        return insights

    # Leaderboard functionality
    def get_leaderboard(self):
        query = """
            SELECT
                u.user_name,
                SUM(w.duration_minutes) AS total_duration
            FROM users u
            JOIN workouts w ON u.user_id = w.user_id
            GROUP BY u.user_id
            ORDER BY total_duration DESC
        """
        cursor = self._execute_query(query)
        return cursor.fetchall() if cursor else []
